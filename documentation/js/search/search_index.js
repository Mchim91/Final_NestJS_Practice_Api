var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.094,1,2.226]],["body/controllers/AppController.html",[0,1.845,1,3.755,2,1.525,3,0.401,4,0.353,5,0.353,6,3.95,7,0.485,8,0.027,9,0.997,10,3.35,11,3.95,12,0.401,13,0.019,14,2.576,15,1.756,16,0.022,17,0.022]],["title/modules/AppModule.html",[18,1.094,19,2.226]],["body/modules/AppModule.html",[1,3.045,2,1.268,3,0.229,4,0.202,5,0.202,7,0.533,8,0.027,9,0.569,10,3.079,11,2.254,12,0.229,13,0.011,16,0.015,17,0.015,18,1.496,19,4.299,20,1.159,21,1.159,22,1.353,23,1.353,24,1.159,25,2.324,26,1.353,27,2.254,28,2.254,29,2.254,30,3.079,31,3.366,32,3.366,33,3.079,34,2.833,35,1.971,36,1.353,37,1.353,38,1.978,39,2.526,40,2.673,41,2.673,42,2.673,43,2.673,44,1.607,45,1.077,46,1.568,47,2.673,48,2.673,49,1.353,50,1.25,51,2.673,52,2.673,53,1.978,54,1.47,55,3.045,56,2.254,57,2.673,58,2.673,59,2.148,60,3.894,61,2.673,62,2.673,63,2.673,64,1.978,65,2.673,66,0.489,67,3.894,68,1.47,69,2.673,70,2.673,71,2.673,72,2.673,73,2.673,74,1.772,75,2.673,76,2.673,77,2.673,78,1.978,79,2.673,80,2.673,81,2.254]],["title/injectables/AppService.html",[10,1.847,82,1.094]],["body/injectables/AppService.html",[3,0.387,4,0.341,5,0.341,7,0.387,8,0.027,9,0.961,10,3.049,12,0.387,13,0.018,16,0.022,17,0.022,82,1.805,83,2.287,84,3.811,85,0.645,86,2.233,87,6.252,88,0.892,89,4.519,90,1.82,91,2.078,92,1.82,93,4.519,94,4.519]],["title/controllers/AuthController.html",[0,1.094,95,2.226]],["body/controllers/AuthController.html",[0,1.511,2,1.511,3,0.398,4,0.35,5,0.35,7,0.483,8,0.027,9,0.988,12,0.398,13,0.018,14,2.553,15,1.74,16,0.022,17,0.022,95,3.735,96,3.914,97,2.791,98,4.642,99,3.07,100,3.914,101,4.642]],["title/modules/AuthModule.html",[18,1.094,30,1.847]],["body/modules/AuthModule.html",[2,1.621,3,0.327,4,0.288,5,0.288,7,0.504,8,0.027,9,0.812,12,0.327,13,0.015,16,0.02,17,0.02,18,1.805,20,1.654,21,1.654,22,1.93,23,1.93,24,1.654,25,2.805,26,2.805,30,3.502,34,2.52,35,2.52,36,1.93,37,1.93,39,2.098,95,3.674,99,3.38,100,3.217,102,3.217,103,3.217,104,3.217,105,3.815,106,3.3,107,3.815,108,3.217]],["title/injectables/AuthService.html",[82,1.094,99,1.7]],["body/injectables/AuthService.html",[3,0.31,4,0.273,5,0.273,7,0.412,8,0.027,9,0.769,12,0.31,13,0.014,15,1.354,16,0.019,17,0.019,46,1.935,54,1.987,59,1.69,64,2.674,66,0.66,74,2.395,78,2.674,82,1.565,83,1.829,85,0.516,86,1.935,88,0.948,90,1.455,91,2.023,92,1.935,99,2.431,106,2.395,109,3.047,110,5.753,111,2.889,112,3.614,113,2.939,114,3.614,115,1.566,116,1.354,117,1.023,118,3.614,119,3.614,120,3.047,121,3.047,122,2.173,123,3.614,124,1.262,125,3.047,126,3.614,127,3.614,128,3.614,129,3.614,130,3.614]],["title/classes/CreatePostDto.html",[13,0.013,131,1.847]],["body/classes/CreatePostDto.html",[3,0.135,4,0.119,5,0.119,7,0.386,8,0.027,12,0.135,13,0.013,16,0.01,17,0.01,49,1.31,59,2.109,66,1.095,85,0.225,88,1.071,91,2.033,117,1.568,131,1.424,132,0.739,133,4.668,134,1.169,135,1.149,136,2.774,137,3.803,138,2.18,139,2.18,140,3.678,141,2.774,142,2.18,143,2.18,144,2.18,145,2.524,146,4.015,147,1.239,148,1.647,149,1.58,150,2.589,151,3.208,152,4.39,153,1.58,154,1.58,155,3.803,156,1.31,157,1.58,158,1.58,159,2.589,160,2.589,161,3.678,162,1.58,163,1.58,164,2.092,165,2.589,166,3.804,167,1.424,168,2.589,169,1.58,170,1.58,171,1.58,172,2.589,173,2.514,174,3.804,175,3.804,176,1.716,177,2.183,178,1.58,179,1.58,180,2.522,181,2.774,182,2.589,183,2.589,184,1.58,185,1.58,186,2.589,187,3.208,188,3.29,189,2.589,190,2.589,191,2.589,192,2.589,193,2.589,194,2.589,195,1.58,196,1.58,197,2.183,198,1.332,199,1.58,200,3.106,201,2.183,202,2.183,203,2.183,204,1.58,205,1.58,206,2.589,207,1.58,208,1.58,209,1.58,210,1.58,211,2.589,212,1.58,213,2.434,214,2.589,215,1.916,216,2.711,217,3.156,218,2.815,219,2.183,220,1.169,221,1.169,222,2.589,223,0.8,224,1.332,225,1.332,226,1.169,227,1.169,228,1.169,229,3.337,230,3.524,231,0.8,232,1.58,233,1.58,234,2.183,235,1.332,236,1.58,237,1.332,238,1.332,239,1.58,240,1.58,241,1.332,242,1.58,243,2.589,244,1.58,245,2.589,246,1.916,247,1.58]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.013,164,1.847]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.374,4,0.329,5,0.329,7,0.374,8,0.026,12,0.374,13,0.021,16,0.021,17,0.021,49,2.746,66,0.798,85,0.623,88,0.862,91,2.034,132,2.041,135,1.895,148,1.326,156,1.242,164,2.984,215,4.015,216,3.262,223,2.209,227,4.015,246,4.369,248,2.352,249,3.681,250,4.366,251,4.366]],["title/classes/CreateTagDto.html",[13,0.013,252,2.019]],["body/classes/CreateTagDto.html",[3,0.272,4,0.24,5,0.24,7,0.377,8,0.027,12,0.272,13,0.017,16,0.017,17,0.017,66,1.047,85,0.453,88,1.131,91,2.387,116,1.894,117,1.247,132,1.486,135,1.538,138,3.349,142,3.349,143,3.349,148,1.74,152,3.739,156,1.008,161,3.258,173,2.483,197,2.68,198,2.68,215,3.258,216,3.038,217,3.616,218,4.037,219,3.713,220,2.351,221,2.351,223,1.608,229,3.739,230,4.037,231,1.608,237,2.68,238,3.713,241,2.68,252,2.647,253,4.998,254,2.68,255,3.178,256,3.178,257,3.178,258,3.178,259,3.178,260,3.178,261,3.178,262,3.178,263,3.178,264,2.68]],["title/classes/CreateUserDto.html",[13,0.013,265,1.847]],["body/classes/CreateUserDto.html",[3,0.263,4,0.231,5,0.231,7,0.263,8,0.026,12,0.263,13,0.017,16,0.017,17,0.017,66,0.981,74,3.285,85,0.437,88,1.06,91,2.301,117,1.216,132,1.433,135,1.499,148,1.631,216,3.228,217,2.845,218,4.183,220,2.267,221,2.267,223,1.55,264,3.62,265,2.361,266,4.767,267,2.267,268,3.667,269,3.667,270,4.179,271,3.064,272,3.064,273,3.064,274,3.064,275,3.064,276,3.064,277,3.064,278,4.293,279,4.293,280,4.293,281,5.37,282,4.293,283,4.293,284,4.293,285,2.845,286,6.14,287,4.293,288,5.37,289,5.37,290,4.293,291,4.293,292,4.293,293,4.293,294,3.064,295,4.293,296,3.064,297,4.955,298,3.064,299,3.064]],["title/classes/GetUsersParamDto.html",[13,0.013,300,2.019]],["body/classes/GetUsersParamDto.html",[3,0.343,4,0.302,5,0.302,7,0.486,8,0.027,12,0.343,13,0.022,16,0.02,17,0.02,46,2.071,66,1.038,85,0.572,88,0.791,117,1.456,124,2.091,132,1.874,135,1.796,147,1.848,148,1.217,155,3.38,173,1.737,213,3.804,217,3.408,223,2.028,226,2.966,230,3.804,231,2.028,300,3.091,301,4.335,302,3.408,303,3.38,304,5.141,305,4.008,306,4.008]],["title/entities/MetaOption.html",[307,1.456,308,1.571]],["body/entities/MetaOption.html",[3,0.272,4,0.24,5,0.24,7,0.377,8,0.027,12,0.272,13,0.013,16,0.017,17,0.017,50,2.772,66,1.083,68,1.748,85,0.453,88,1.131,91,1.65,124,1.765,135,1.538,147,1.434,148,1.74,156,1.44,167,2.422,180,3.616,187,3.713,246,3.739,248,2.569,307,1.909,308,2.059,309,2.68,310,4.261,311,4.261,312,4.261,313,3.178,314,3.349,315,3.178,316,2.106,317,2.919,318,3.178,319,2.68,320,4.403,321,3.713,322,3.178,323,3.178,324,4.261,325,3.178,326,2.351,327,2.919,328,3.713,329,3.713,330,1.377,331,2.351]],["title/controllers/MetaOptionsController.html",[0,1.094,332,2.226]],["body/controllers/MetaOptionsController.html",[0,1.251,2,1.251,3,0.329,4,0.29,5,0.29,7,0.477,8,0.027,9,0.818,12,0.329,13,0.015,14,2.114,15,1.441,16,0.02,17,0.02,49,2.532,50,2.34,66,0.702,85,0.548,86,2.015,88,0.759,90,1.548,92,1.548,97,2.311,115,1.666,116,1.441,117,1.088,148,1.167,156,1.349,164,3.445,228,2.844,248,2.169,332,3.316,333,3.241,334,5.004,335,2.532,336,3.241,337,3.843,338,2.311,339,1.797,340,2.752,341,3.241,342,3.241,343,3.843,344,3.843,345,2.844,346,3.843]],["title/modules/MetaOptionsModule.html",[18,1.094,31,2.019]],["body/modules/MetaOptionsModule.html",[2,1.637,3,0.332,4,0.292,5,0.292,7,0.525,8,0.027,9,0.824,12,0.332,13,0.015,16,0.02,17,0.02,18,1.818,20,1.679,21,1.679,22,1.959,23,1.959,24,1.679,25,2.826,26,1.959,31,3.774,35,2.544,36,1.959,37,1.959,39,2.13,44,2.328,45,1.56,49,2.544,50,1.811,248,1.679,308,1.811,332,3.701,340,3.452,341,3.265,342,3.265,347,3.265,348,3.265,349,3.872,350,3.872,351,2.328,352,3.872]],["title/injectables/MetaOptionsService.html",[82,1.094,340,1.847]],["body/injectables/MetaOptionsService.html",[3,0.298,4,0.263,5,0.263,7,0.507,8,0.027,9,0.74,12,0.298,13,0.014,15,1.304,16,0.019,17,0.019,45,1.401,49,2.37,54,2.576,66,0.856,82,1.525,83,1.76,85,0.496,86,1.887,88,0.925,90,1.401,92,1.401,111,2.816,115,2.031,116,1.756,117,1.327,122,2.092,139,2.306,156,0.796,164,3.252,228,2.574,248,2.296,308,1.627,330,1.508,335,2.37,336,3.95,339,1.627,340,2.576,351,2.092,353,4.466,354,2.934,355,3.51,356,3.479,357,3.406,358,3.479,359,4.684,360,3.479,361,2.306,362,2.306,363,2.934,364,3.479,365,3.466,366,3.479]],["title/classes/PatchPostDto.html",[13,0.013,367,2.019]],["body/classes/PatchPostDto.html",[3,0.343,4,0.302,5,0.302,7,0.486,8,0.027,12,0.343,13,0.02,16,0.02,17,0.02,66,0.733,85,0.572,88,0.791,124,2.162,131,2.204,132,1.874,134,2.966,135,1.796,147,1.674,148,1.217,156,1.177,173,1.737,213,3.804,216,3.091,223,2.028,229,3.804,231,2.028,335,2.028,367,3.091,368,4.335,369,4.335,370,5.141,371,4.008,372,5.141,373,4.008,374,4.008,375,3.38,376,2.966,377,3.38]],["title/classes/PatchUserDto.html",[13,0.013,378,2.226]],["body/classes/PatchUserDto.html",[3,0.401,4,0.353,5,0.353,7,0.485,8,0.026,12,0.401,13,0.019,16,0.022,17,0.022,132,2.19,265,2.576,267,3.466,335,2.37,369,4.778,375,3.95,378,3.755,379,3.95,380,5.666,381,3.95,382,3.95,383,3.466]],["title/entities/Post.html",[156,0.769,307,1.456]],["body/entities/Post.html",[3,0.159,4,0.14,5,0.14,7,0.416,8,0.027,12,0.159,13,0.007,16,0.012,17,0.012,46,1.953,50,0.867,59,2.705,66,1.146,68,1.019,85,0.264,88,1.142,91,2.088,117,1.639,124,1.28,135,1.029,137,3.091,138,2.429,139,3.02,140,3.905,141,3.091,142,2.429,143,2.429,144,2.429,145,2.739,146,3.091,147,0.959,148,1.757,156,0.674,167,3.064,180,1.952,200,3.371,224,1.563,225,1.563,234,4.449,248,0.803,285,3.497,307,1.277,308,1.952,314,2.429,316,3.497,317,4.029,319,1.563,327,3.603,328,1.563,329,2.484,330,0.803,331,2.18,351,1.114,384,1.563,385,2.429,386,1.854,387,2.946,388,1.854,389,2.484,390,1.854,391,3.905,392,2.484,393,1.854,394,1.854,395,2.946,396,1.854,397,3.521,398,2.946,399,1.854,400,2.946,401,1.854,402,3.521,403,1.854,404,2.484,405,2.18,406,1.854,407,1.854,408,2.296,409,1.563,410,2.946,411,3.665,412,1.854,413,1.854,414,1.854,415,2.946,416,2.484,417,2.946,418,1.563,419,1.854,420,1.854,421,1.854]],["title/controllers/PostsController.html",[0,1.094,422,2.226]],["body/controllers/PostsController.html",[0,0.806,2,0.806,3,0.212,4,0.187,5,0.187,7,0.445,8,0.027,9,0.526,12,0.212,13,0.01,14,1.361,15,0.927,16,0.015,17,0.015,66,0.889,85,0.353,86,1.481,88,0.96,90,1.958,91,1.646,92,1.958,97,1.487,115,2.107,116,1.822,117,1.377,124,1.285,131,2.995,144,2.438,147,1.43,148,1.476,156,1.326,161,3.597,173,2.107,231,1.252,335,1.861,338,1.487,339,1.157,367,2.923,376,2.722,377,3.102,422,2.438,423,2.086,424,1.831,425,3.678,426,3.678,427,3.678,428,3.702,429,3.678,430,2.474,431,3.678,432,2.722,433,3.678,434,4.862,435,4.862,436,3.678,437,2.474,438,2.474,439,2.474,440,2.91,441,2.474,442,2.474,443,3.678,444,2.474,445,3.678,446,2.474,447,3.678,448,3.678,449,4.099,450,2.474,451,2.474,452,3.678,453,2.086,454,3.102,455,3.102,456,1.831,457,2.023,458,2.086,459,3.702,460,3.702,461,2.086,462,1.831,463,2.474,464,2.474,465,2.474,466,2.474,467,2.474,468,3.102,469,3.102,470,2.474,471,2.474,472,2.474,473,2.474,474,2.474,475,2.474]],["title/modules/PostsModule.html",[18,1.094,32,2.019]],["body/modules/PostsModule.html",[2,1.495,3,0.289,4,0.255,5,0.255,7,0.546,8,0.027,9,0.718,12,0.289,13,0.013,16,0.018,17,0.018,18,1.698,20,1.463,21,1.463,22,1.708,23,1.708,24,1.463,25,2.639,26,1.708,32,3.874,33,3.32,34,3.055,35,2.323,36,1.708,37,1.708,39,2.524,44,2.03,45,1.36,46,1.849,50,1.579,108,2.847,156,0.773,248,1.463,308,2.146,351,2.03,418,2.847,422,3.457,457,3.32,458,2.847,476,2.847,477,3.376,478,2.847,479,3.376,480,3.376,481,2.847,482,3.376,483,3.376]],["title/injectables/PostsService.html",[82,1.094,457,1.847]],["body/injectables/PostsService.html",[3,0.185,4,0.163,5,0.163,7,0.488,8,0.027,9,0.46,12,0.185,13,0.009,15,1.702,16,0.013,17,0.013,45,0.871,50,1.011,54,2.496,59,2.123,66,0.83,78,1.6,82,1.082,83,1.094,85,0.308,86,1.338,88,0.967,90,1.828,92,1.828,111,1.997,113,2.123,115,1.968,116,1.702,117,1.286,120,1.823,122,2.432,124,1.413,131,2.962,136,1.823,139,1.433,145,3.427,147,1.317,156,1.272,248,0.937,308,1.011,330,0.937,335,2.047,338,1.3,339,1.011,345,1.6,351,1.3,355,3.982,357,3.238,361,3.009,362,1.433,363,1.823,367,2.945,376,2.458,385,3.247,432,1.6,440,2.202,457,1.827,462,1.6,481,1.823,484,1.823,485,3.828,486,3.828,487,2.162,488,2.725,489,4.045,490,4.045,491,2.162,492,3.322,493,2.162,494,2.162,495,2.458,496,2.162,497,2.162,498,3.322,499,2.162,500,2.162,501,2.162,502,4.045,503,1.823,504,4.113,505,2.162,506,2.162,507,2.162,508,2.162,509,3.322,510,2.162,511,2.162,512,2.162,513,2.162,514,2.162,515,1.823,516,2.162,517,1.823]],["title/entities/Tag.html",[307,1.456,408,1.847]],["body/entities/Tag.html",[3,0.201,4,0.177,5,0.177,7,0.303,8,0.027,12,0.201,13,0.009,16,0.014,17,0.014,59,2.923,66,1.153,68,1.292,85,0.335,88,1.174,91,2.229,116,1.596,117,1.002,124,1.487,135,1.236,138,2.822,142,2.822,143,2.822,147,1.152,148,1.806,156,1.223,167,2.606,173,1.845,180,3.541,285,3.541,307,1.534,310,3.59,311,3.59,312,3.59,314,2.822,316,3.369,317,3.781,321,2.984,324,3.59,326,1.738,327,3.541,330,1.018,331,2.619,389,3.995,391,3.953,392,2.984,404,3.995,405,4.401,408,1.946,409,1.981,416,2.984,424,3.15,515,2.984,518,1.981,519,4.257,520,2.349,521,4.257,522,2.349,523,2.349,524,2.349,525,2.349,526,2.349,527,2.349,528,2.349,529,2.349,530,2.349]],["title/controllers/TagsController.html",[0,1.094,531,2.226]],["body/controllers/TagsController.html",[0,1.044,2,1.044,3,0.275,4,0.242,5,0.242,7,0.435,8,0.027,9,0.682,12,0.275,13,0.013,14,1.764,15,1.202,16,0.018,17,0.018,66,0.928,85,0.458,86,1.785,88,1.002,90,2.045,92,2.045,97,1.928,115,2.201,116,1.903,117,1.438,124,1.913,145,1.928,147,1.936,148,1.542,156,1.162,252,3.574,335,2.243,338,1.928,339,1.5,345,2.373,428,4.282,440,4.039,454,4.282,456,2.373,488,2.57,495,2.373,531,2.937,532,2.705,533,4.432,534,3.208,535,3.208,536,3.208,537,3.208,538,4.432,539,3.208,540,2.705,541,2.705,542,3.208,543,3.208,544,3.208,545,3.208,546,3.208,547,3.208]],["title/modules/TagsModule.html",[18,1.094,33,1.847]],["body/modules/TagsModule.html",[2,1.614,3,0.324,4,0.286,5,0.286,7,0.521,8,0.027,9,0.806,12,0.324,13,0.015,16,0.02,17,0.02,18,1.799,20,1.641,21,1.641,22,1.916,23,1.916,24,1.641,25,2.795,26,2.795,33,3.496,35,2.508,36,1.916,37,1.916,39,2.082,44,2.277,45,1.525,408,2.082,488,3.376,531,3.661,541,3.193,548,3.193,549,3.193,550,3.193,551,3.787,552,3.787,553,3.193,554,3.787]],["title/injectables/TagsService.html",[82,1.094,488,1.7]],["body/injectables/TagsService.html",[3,0.23,4,0.202,5,0.202,7,0.46,8,0.027,9,0.57,12,0.23,13,0.011,15,1.005,16,0.02,17,0.015,45,1.08,54,2.53,59,1.824,66,0.981,82,1.27,83,1.356,85,0.382,86,1.571,88,1.06,90,2.035,92,2.035,111,2.346,115,2.328,116,2.013,117,1.521,122,1.612,124,1.875,145,1.612,147,1.968,252,3.228,330,1.162,339,1.253,355,4.169,357,3.038,361,3.349,362,1.777,365,2.887,408,2.146,440,2.586,488,1.974,495,2.887,504,3.404,517,2.26,540,2.26,553,2.26,555,2.26,556,3.902,557,3.902,558,3.902,559,2.68,560,2.68,561,3.902,562,3.902,563,2.68,564,2.68,565,3.902,566,2.68,567,3.902,568,2.68,569,2.68,570,2.68,571,2.68,572,2.68,573,2.68,574,2.68,575,2.68,576,2.68]],["title/entities/User.html",[46,1.353,307,1.456]],["body/entities/User.html",[3,0.246,4,0.216,5,0.216,7,0.351,8,0.027,12,0.246,13,0.011,16,0.016,17,0.016,46,1.65,59,2.438,66,1.139,68,1.577,74,3.167,85,0.409,88,1.132,91,2.263,124,1.669,135,1.431,147,1.334,148,1.741,156,1.313,167,3.154,268,3.536,269,3.536,270,4.03,285,4.001,307,1.776,314,3.167,316,3.455,317,4.001,326,2.122,327,3.655,330,1.243,391,4.466,402,5.09,405,3.031,424,3.536,577,2.418,578,2.867,579,2.867,580,2.867,581,2.867,582,2.867,583,2.867,584,4.096,585,2.867,586,4.096]],["title/controllers/UsersController.html",[0,1.094,587,2.226]],["body/controllers/UsersController.html",[0,0.767,2,0.767,3,0.202,4,0.178,5,0.178,7,0.458,8,0.027,9,0.501,12,0.202,13,0.009,14,1.295,15,0.883,16,0.014,17,0.014,66,1.014,81,2.989,85,0.336,86,1.428,88,0.842,90,1.717,92,1.911,97,1.416,113,1.994,115,1.848,116,1.907,117,1.207,144,1.561,147,2.037,148,1.295,151,4,156,0.976,167,2.609,173,2.318,176,3.784,231,1.192,265,2.94,300,2.852,302,3.544,338,1.416,339,1.101,378,3.544,383,2.623,449,2.989,453,2.989,455,3.595,456,3.155,459,2.989,460,2.989,461,1.986,462,1.742,468,1.986,469,2.989,486,1.986,503,2.989,587,2.35,588,1.986,589,2.989,590,4.263,591,3.545,592,1.986,593,2.355,594,2.355,595,4.508,596,2.355,597,3.545,598,3.545,599,3.545,600,2.355,601,3.545,602,3.545,603,3.545,604,3.545,605,3.545,606,3.545,607,3.545,608,2.355,609,2.989,610,2.355,611,2.355,612,2.355,613,1.986,614,1.986,615,1.986,616,4.263,617,2.355,618,2.355,619,2.355,620,2.355,621,2.355,622,2.355,623,2.355,624,2.355,625,2.355,626,2.355,627,2.355]],["title/modules/UsersModule.html",[18,1.094,34,1.7]],["body/modules/UsersModule.html",[2,1.579,3,0.314,4,0.277,5,0.277,7,0.53,8,0.027,9,0.78,12,0.314,13,0.015,16,0.019,17,0.019,18,1.77,20,1.589,21,1.589,22,1.855,23,1.855,24,1.589,25,2.751,26,2.751,30,2.667,34,3.191,35,2.454,36,1.855,37,1.855,39,2.016,44,2.204,45,1.476,46,1.476,106,3.215,113,3.104,587,3.603,615,3.09,628,3.09,629,3.09,630,3.09,631,3.665,632,3.665,633,3.665,634,3.09,635,3.665]],["title/injectables/UsersService.html",[82,1.094,113,1.571]],["body/injectables/UsersService.html",[3,0.207,4,0.182,5,0.182,7,0.493,8,0.027,9,0.513,12,0.207,13,0.01,15,1.352,16,0.014,17,0.014,45,0.971,46,1.453,53,1.783,54,2.639,64,1.783,66,0.877,82,1.175,83,1.22,85,0.344,86,1.453,88,0.947,90,1.741,92,1.741,99,2.829,106,1.597,111,2.169,113,1.687,115,2.08,116,1.799,117,1.359,121,2.032,122,2.599,124,1.26,125,2.032,147,1.914,176,2.865,265,2.826,268,3.551,269,2.669,300,2.885,302,1.597,330,1.045,339,1.127,355,3.575,357,2.885,361,2.391,362,1.597,365,2.669,383,1.783,485,3.042,504,3.199,589,3.042,592,3.042,595,3.645,609,2.032,613,2.032,614,2.032,634,2.032,636,2.032,637,3.607,638,2.41,639,4.323,640,5.591,641,2.41,642,2.41,643,3.607,644,2.41,645,3.607,646,2.41,647,2.41,648,2.41,649,2.41,650,2.41,651,2.41,652,3.607,653,2.41,654,2.41,655,2.41,656,2.41,657,2.41,658,2.41,659,2.41,660,2.41,661,2.41,662,3.607,663,3.607,664,2.41]],["title/coverage.html",[665,3.384]],["body/coverage.html",[0,1.85,1,1.849,5,0.21,6,2.352,8,0.027,10,1.534,13,0.023,16,0.016,17,0.016,24,1.209,38,2.064,46,1.123,49,1.412,50,1.878,55,1.849,66,0.51,82,1.85,84,2.352,95,1.849,96,2.352,99,1.412,109,2.352,113,1.304,131,1.534,133,2.352,134,2.972,156,0.919,164,1.534,227,2.064,248,2.231,249,2.352,252,1.677,253,2.352,254,2.352,265,1.534,266,2.352,267,2.972,300,1.677,301,2.352,302,1.849,303,2.352,307,2.231,308,1.304,309,2.352,332,1.849,333,2.352,340,1.534,353,2.352,354,2.352,367,1.677,368,2.352,378,1.849,379,2.352,384,2.352,408,1.534,422,1.849,423,2.352,432,2.064,457,1.534,484,2.352,488,1.412,518,2.352,531,1.849,532,2.352,555,2.352,577,2.352,587,1.849,588,2.352,636,2.352,665,2.064,666,2.79,667,2.79,668,2.79,669,6.744,670,6.103,671,2.79,672,5.455,673,4.016,674,2.352,675,2.79,676,2.79,677,4.706,678,4.706,679,4.016,680,2.79,681,2.79]],["title/dependencies.html",[21,1.75,682,2.369]],["body/dependencies.html",[8,0.027,9,0.906,13,0.021,16,0.021,17,0.021,21,1.845,45,1.715,53,3.15,55,2.822,223,2.154,226,3.15,231,2.154,330,1.845,381,3.59,382,3.59,683,5.838,684,4.257,685,4.257,686,4.257,687,4.257,688,4.257,689,4.257,690,4.257,691,4.257,692,4.257,693,4.257,694,4.257,695,4.257,696,4.257,697,4.257,698,4.257,699,4.257,700,4.257,701,4.257,702,4.257]],["title/miscellaneous/enumerations.html",[703,1.545,704,3.404]],["body/miscellaneous/enumerations.html",[8,0.027,16,0.021,17,0.021,85,0.623,140,4.015,156,1.242,176,3.597,177,4.576,181,4.576,200,4.015,201,4.576,202,4.576,203,4.576,235,4.576,703,2.401,704,3.681,705,4.366,706,4.366,707,4.366,708,5.595,709,4.366]],["title/miscellaneous/functions.html",[703,1.545,710,3.404]],["body/miscellaneous/functions.html",[8,0.024,16,0.024,17,0.024,24,2.743,85,0.732,674,4.324,703,2.82,710,4.324,711,5.128]],["title/index.html",[85,0.401,712,2.81,713,2.81]],["body/index.html",[4,0.27,8,0.027,16,0.019,17,0.019,152,3.973,173,1.55,357,2.15,385,2.37,665,2.646,714,3.576,715,3.576,716,4.771,717,3.576,718,3.576,719,3.576,720,3.576,721,3.576,722,3.576,723,5.37,724,3.576,725,3.576,726,3.576,727,6.268,728,3.576,729,3.576,730,3.576,731,6.14,732,3.576,733,3.576,734,4.771,735,3.576,736,3.576,737,3.576,738,3.576,739,4.771,740,4.771,741,3.576,742,3.576,743,3.576,744,4.771,745,4.771,746,3.576,747,3.576,748,3.576,749,3.576,750,3.576,751,3.015,752,3.576,753,3.576,754,3.576,755,3.576,756,3.576,757,3.576,758,3.576,759,3.576,760,3.576,761,3.576,762,3.576,763,3.576,764,3.576,765,3.576,766,3.576,767,3.576,768,3.015]],["title/modules.html",[20,1.983]],["body/modules.html",[8,0.022,16,0.022,17,0.022,19,3.049,20,1.994,30,2.53,31,2.766,32,2.766,33,2.53,34,2.328,751,5.53,769,6.558,770,6.558,771,6.558]],["title/overview.html",[772,3.857]],["body/overview.html",[2,1.032,8,0.027,10,2.774,16,0.017,17,0.017,18,1.032,19,4.358,20,1.373,21,1.373,22,1.603,23,1.603,24,1.373,25,1.603,26,1.603,27,2.671,28,2.671,29,2.671,30,3.257,31,3.441,32,3.779,33,3.34,34,3.073,35,2.223,36,1.603,37,1.603,68,1.742,83,1.603,99,3.073,102,2.671,103,2.671,104,2.671,113,2.84,132,1.481,340,2.774,347,2.671,348,2.671,457,2.774,476,2.671,478,2.671,488,3.073,548,2.671,549,2.671,550,2.671,628,2.671,629,2.671,630,2.671,772,2.671,773,5.045,774,3.168,775,3.168]],["title/properties.html",[135,1.41,682,2.369]],["body/properties.html",[8,0.027,16,0.023,17,0.023,135,1.765,173,2.19,385,3.349,768,4.261,776,5.053,777,5.053,778,5.053]],["title/miscellaneous/variables.html",[703,1.545,779,3.404]],["body/miscellaneous/variables.html",[8,0.025,16,0.023,17,0.023,38,3.739,55,3.929,56,4.261,85,0.721,397,4.261,703,2.779,708,4.261,779,4.261,780,5.053]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":777,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["10.0.0",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":392,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["123",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["16t07:46:32+00:00",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+00:00'})@isiso8601()@isoptional",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isint()@isnotempty",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.6",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":449,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":404,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.3.0",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":774,"title":{},"body":{"overview.html":{}}}],["5432",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":773,"title":{},"body":{"overview.html":{}}}],["7",{"_index":775,"title":{},"body":{"overview.html":{}}}],["7.0.3",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.5",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["96",{"_index":402,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["amazing",{"_index":752,"title":{},"body":{"index.html":{}}}],["api",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":459,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":259,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":371,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["apiproperty({type",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":261,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":255,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":257,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":460,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":461,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":464,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":729,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["application'})@apiresponse({status",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":722,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":355,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":95,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":385,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["authservice",{"_index":99,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":504,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":753,"title":{},"body":{"index.html":{}}}],["based",{"_index":503,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["blog",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostsController.html":{}}}],["body",{"_index":338,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":771,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":769,"title":{},"body":{"modules.html":{}}}],["building",{"_index":717,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":331,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":322,"title":{},"body":{"entities/MetaOption.html":{}}}],["character",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":347,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":348,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":476,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":477,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":478,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":548,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":549,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":550,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":628,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":630,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":629,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":327,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":316,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["configmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(environment",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metoptionsrepo",{"_index":356,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(tagsrepo",{"_index":559,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":487,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(usersservice",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["content'})@isstring()@isoptional",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":343,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":463,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":542,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["correctly",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{}}}],["coverage",{"_index":665,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":335,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(@body",{"_index":345,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createpostdto",{"_index":493,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":336,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":534,"title":{},"body":{"controllers/TagsController.html":{}}}],["createdate",{"_index":310,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":312,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createpost",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":470,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":131,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":164,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createtag",{"_index":556,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtag(createtagdto",{"_index":562,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":252,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":265,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["cross",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["data",{"_index":365,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["date",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":397,"title":{},"body":{"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":440,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete('soft",{"_index":538,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":544,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":495,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":517,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":519,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":521,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":474,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":730,"title":{},"body":{"index.html":{}}}],["digit",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["documentation",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["draft",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":339,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":462,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":741,"title":{},"body":{"index.html":{}}}],["each",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":411,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":718,"title":{},"body":{"index.html":{}}}],["email",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["english",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["entities",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":307,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":704,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["error",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"index.html":{}}}],["exception",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["exist",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":448,"title":{},"body":{"controllers/PostsController.html":{}}}],["existinguser",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":369,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetched",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["final",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["find",{"_index":502,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":485,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmultipletags",{"_index":557,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":565,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["forwardref",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":716,"title":{},"body":{"index.html":{}}}],["function",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":710,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:userid",{"_index":443,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':id",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id?')@apioperation({summary",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["getpost",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpost(@param('userid",{"_index":466,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpost(userid",{"_index":442,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":712,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(getuserparamdto",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusersparamdto",{"_index":300,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["grow",{"_index":748,"title":{},"body":{"index.html":{}}}],["handle",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":759,"title":{},"body":{"index.html":{}}}],["host",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":765,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id'})@isoptional()@isint()@type(undefined",{"_index":305,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["identifier",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":573,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":85,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":82,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":362,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":363,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":501,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":569,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":726,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":728,"title":{},"body":{"index.html":{}}}],["integer",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isarray",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":250,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@isemail()@maxlength(96",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*?[a",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["john",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":755,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":328,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":415,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":762,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":768,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":745,"title":{},"body":{"index.html":{}}}],["limit",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["list",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["lowercase",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["manytomany",{"_index":416,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":409,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":417,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":386,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*?[a",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meta",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["metadata",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":308,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptions",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":395,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":332,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":344,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepo",{"_index":490,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":340,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["metoptionsrepo",{"_index":359,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["minimum",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":264,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":703,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":744,"title":{},"body":{"index.html":{}}}],["mode",{"_index":734,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":758,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":763,"title":{},"body":{"index.html":{}}}],["name",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["needs",{"_index":372,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":723,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":767,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":381,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["node.js",{"_index":715,"title":{},"body":{"index.html":{}}}],["npm",{"_index":727,"title":{},"body":{"index.html":{}}}],["null",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":317,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ondelete",{"_index":321,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":586,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":583,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":329,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":319,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":746,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":351,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":309,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":315,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":318,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":313,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":325,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":323,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":334,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":350,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":333,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:9",{"_index":337,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":249,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":251,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":349,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":342,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":354,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:14",{"_index":360,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":358,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":353,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":772,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":682,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":453,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":303,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:12",{"_index":306,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":454,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["partially",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":375,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":370,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":380,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":455,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":367,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.id",{"_index":514,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostsdto",{"_index":452,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuserdto",{"_index":378,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["person",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":756,"title":{},"body":{"index.html":{}}}],["port",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":156,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":584,"title":{},"body":{"entities/User.html":{}}}],["post.dto",{"_index":376,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:117",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":374,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:126",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:30",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:38",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:47",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:55",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:63",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:72",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:81",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:89",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:98",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":481,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":320,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.tags",{"_index":515,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["postgres",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["postrepo",{"_index":489,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":480,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":422,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":465,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":457,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":421,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":420,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":314,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":736,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":714,"title":{},"body":{"index.html":{}}}],["project",{"_index":747,"title":{},"body":{"index.html":{}}}],["properties",{"_index":135,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":341,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":458,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":541,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["published",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishedon",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":456,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{}}}],["read",{"_index":757,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":511,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":357,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["required",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":731,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["sample_token",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":508,"title":{},"body":{"injectables/PostsService.html":{}}}],["scalable",{"_index":719,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["serialize",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":720,"title":{},"body":{"index.html":{}}}],["side",{"_index":721,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["softdelete",{"_index":533,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":546,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":537,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeleted",{"_index":576,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove",{"_index":558,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":567,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":304,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":750,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":89,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":633,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":674,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":248,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":368,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":709,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":326,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":384,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:20",{"_index":394,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:23",{"_index":414,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:31",{"_index":399,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:34",{"_index":406,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:42",{"_index":407,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:45",{"_index":390,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:48",{"_index":403,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:51",{"_index":393,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:54",{"_index":401,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:58",{"_index":413,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:64",{"_index":396,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:67",{"_index":388,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:23",{"_index":444,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:36",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":451,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:53",{"_index":441,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":479,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":484,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:12",{"_index":491,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:22",{"_index":494,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:38",{"_index":497,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:49",{"_index":499,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:64",{"_index":496,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":253,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":500,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":555,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:14",{"_index":563,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:21",{"_index":566,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:31",{"_index":564,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:40",{"_index":568,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":560,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":419,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":518,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":525,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":526,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":529,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:37",{"_index":523,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:44",{"_index":528,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:52",{"_index":524,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:57",{"_index":527,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:60",{"_index":520,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:63",{"_index":530,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:66",{"_index":522,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":532,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:17",{"_index":535,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:22",{"_index":536,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:27",{"_index":539,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":482,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":551,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":301,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":379,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:11",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:20",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:34",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:50",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":418,"title":{},"body":{"entities/Post.html":{},"modules/PostsModule.html":{}}}],["src/users/user.entity.ts",{"_index":577,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:10",{"_index":579,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:13",{"_index":581,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:16",{"_index":578,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":582,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:22",{"_index":585,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":580,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:41",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":631,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":732,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":735,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":737,"title":{},"body":{"index.html":{}}}],["started",{"_index":713,"title":{"index.html":{}},"body":{}}],["starter",{"_index":725,"title":{},"body":{"index.html":{}}}],["statements",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":760,"title":{},"body":{"index.html":{}}}],["story",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["successfully",{"_index":469,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":450,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":468,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":751,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":770,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":408,"title":{"entities/Tag.html":{}},"body":{"entities/Post.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":540,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":254,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:18",{"_index":260,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:27",{"_index":263,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:32",{"_index":256,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":262,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:43",{"_index":258,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":553,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tags",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":552,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.posts",{"_index":410,"title":{},"body":{"entities/Post.html":{}}}],["tags/tags.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":531,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepo",{"_index":561,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":488,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":740,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":743,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":742,"title":{},"body":{"index.html":{}}}],["tests",{"_index":739,"title":{},"body":{"index.html":{}}}],["text",{"_index":389,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":749,"title":{},"body":{"index.html":{}}}],["this.configservice.get('s3_bucket",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.metaoptionservice.create(createpostmetaoptionsdto",{"_index":346,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.metoptionsrepo.create(createpostmetaoptionsdto",{"_index":364,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metoptionsrepo.save(metaoptions",{"_index":366,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.postrepo.create",{"_index":507,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.delete(id",{"_index":516,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.find",{"_index":510,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.findoneby",{"_index":513,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.save(post",{"_index":509,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create(createpostdto",{"_index":471,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete(id",{"_index":475,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.findall",{"_index":467,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update(patchpostsdto",{"_index":473,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepo.create(createtagdto",{"_index":570,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepo.delete(id",{"_index":574,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepo.find",{"_index":572,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepo.save(tag",{"_index":571,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepo.softdelete(id",{"_index":575,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag(createtagdto",{"_index":543,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":545,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":506,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":512,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":547,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userservice.findonebyid(createpostdto.authorid",{"_index":505,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersrepo.create(createuserdto",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepo.findone",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepo.findoneby",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepo.save(user",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["thrown",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timestamp",{"_index":400,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":761,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":412,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":766,"title":{},"body":{"index.html":{}}}],["type",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":330,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":352,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":483,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":554,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":635,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":382,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":724,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":398,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":405,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":738,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":361,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":778,"title":{},"body":{"properties.html":{}}}],["update",{"_index":486,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["update(patchpostdto",{"_index":498,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":377,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":373,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":311,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":324,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":472,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":446,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":447,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateuser",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@body",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(patchuserdto",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["uppercase",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url'})@isstring()@isnotempty()@maxlength(256",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["usefactory",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":46,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":383,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":634,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":387,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":445,"title":{},"body":{"controllers/PostsController.html":{}}}],["username",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":302,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":632,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":587,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":492,"title":{},"body":{"injectables/PostsService.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepo",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":113,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validatenested",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":708,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":391,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":779,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":776,"title":{},"body":{"properties.html":{}}}],["void",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{}}}],["want",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":733,"title":{},"body":{"index.html":{}}}],["website",{"_index":764,"title":{},"body":{"index.html":{}}}],["world",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":754,"title":{},"body":{"index.html":{}}}],["z])(?=.*?[0",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*?[a",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule } from '@nestjs/config';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      // envFilePath: ['.env.development'],\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: () => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: true,\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: '123',\n        host: 'localhost',\n        database: 'final-nestjs-api',\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [forwardRef(() => UsersModule)],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  // login(email: string, password: string, id: string) {\n  //   // check user exist in database\n  //   const user = this.usersService.findOneById('1234');\n  //   // login\n  //   // token\n  //   return 'SAMPLE_TOKEN';\n  // }\n\n  isAuthenticated() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'array', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+00:00'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{ \"@context\": \"https://schema.org\", \"@type\": \"Person\" }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'my-blog-post', description: 'For Example - 'my-url'})@IsString()@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values, 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from '../enums/postType.enum';\nimport { Type } from 'class-transformer';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    example: 'my-blog-post',\n    description: \"For Example - 'my-url\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values, 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example: '{ \"@context\": \"https://schema.org\", \"@type\": \"Person\" }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+00:00',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishedOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 2],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'The metaValue is JSON string',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'my-blog-post', description: 'For Example - 'my-url'})@IsString()@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty({\n    example: 'my-blog-post',\n    description: \"For Example - 'my-url\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/, {message: 'Has minimum 8 characters in length, At least one uppercase English letter, At least one lowercase English letter, At least one digit, At least one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/, {\n    message:\n      'Has minimum 8 characters in length, At least one uppercase English letter, At least one lowercase English letter, At least one digit, At least one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionService: MetaOptionsService) {}\n  @Post()\n  create(@Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    return this.metaOptionService.create(createPostMetaOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  controllers: [MetaOptionsController],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metOptionsRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metOptionsRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    @InjectRepository(MetaOption)\n    private readonly metOptionsRepo: Repository,\n  ) {}\n\n  async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    const metaOptions = this.metOptionsRepo.create(createPostMetaOptionsDto);\n    const data = this.metOptionsRepo.save(metaOptions);\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tags => tags.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { postType } from './enums/postType.enum';\nimport { postStatus } from './enums/postStatus.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: postType,\n    nullable: false,\n    default: postType.POST,\n  })\n  postType: postType;\n\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: postStatus,\n    nullable: false,\n    default: postStatus.DRAFT,\n  })\n  status: postStatus;\n\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  schema?: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl?: string;\n\n  @Column({ type: 'timestamp', nullable: true })\n  publishedOn?: Date;\n\n  @ManyToMany(() => Tag, (tags) => tags.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    // eager: true,\n  })\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts)\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is correctly successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  @Get('/:userId?')\n  getPost(@Param('userId') userId: string) {\n    return this.postService.findAll();\n  }\n\n  @ApiOperation({\n    summary: 'Create a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'You get a 201 response if your post is correctly successfully',\n  })\n  @Post()\n  createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postService.create(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostsDto: PatchPostDto) {\n    return this.postService.update(patchPostsDto);\n  }\n\n  @Delete()\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { User } from 'src/users/user.entity';\n\n@Module({\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption, User]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, tagsService: TagsService, postRepo: Repository, metaOptionsRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    private readonly userService: UsersService,\n    private readonly tagsService: TagsService,\n    @InjectRepository(Post)\n    private readonly postRepo: Repository,\n    @InjectRepository(MetaOption)\n    readonly metaOptionsRepo: Repository,\n  ) {}\n\n  async create(@Body() createPostDto: CreatePostDto) {\n    // Find author from database based on authorId\n    const author = await this.userService.findOneById(createPostDto.authorId);\n    // Find tags\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Create Post\n    const post = this.postRepo.create({\n      ...createPostDto,\n      author: author,\n      tags: tags,\n    });\n    // Save Post\n    return await this.postRepo.save(post);\n  }\n\n  async findAll() {\n    const post = await this.postRepo.find({\n      relations: {\n        metaOptions: true,\n        author: true,\n        tags: true,\n      },\n    });\n    return post;\n  }\n\n  async update(patchPostDto: PatchPostDto) {\n    // Find new tags\n    let tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n\n    // Update the post\n    let post = await this.postRepo.findOneBy({\n      id: patchPostDto.id,\n    });\n\n    // Update the tags\n    post.tags = tags;\n\n    return await this.postRepo.save(post);\n  }\n\n  async delete(id: number) {\n    await this.postRepo.delete(id);\n\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    unique: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'text',\n    unique: true,\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    unique: true,\n    nullable: true,\n  })\n  featuredImageUrl: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                delete\n                            \n                            \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private readonly tagsService: TagsService) {}\n\n  @Post()\n  create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.createTag(createTagDto);\n  }\n\n  @Delete()\n  delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  @Delete('soft-delete')\n  public softDelete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagsRepo: Repository,\n  ) {}\n\n  async createTag(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepo.create(createTagDto);\n    const data = this.tagsRepo.save(tag);\n\n    return data;\n  }\n\n  async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepo.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  async delete(id: number) {\n    await this.tagsRepo.delete(id);\n\n    return {\n      deleted: true,\n      id,\n    };\n  }\n\n  async softRemove(id: number) {\n    await this.tagsRepo.softDelete(id);\n\n    return {\n      softDeleted: true,\n      id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  firstName: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: true })\n  lastName: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false, unique: true })\n  email: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  password: string;\n\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getUser\n                            \n                            \n                                    \n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query'})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number you want the API to return'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Param,\n  Body,\n  Query,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get(':id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'The position of the page number you want the API to return',\n  })\n  getUser(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit') limit: number,\n    @Query('page') page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  // Partially update\n  @Patch()\n  updateUser(@Body() patchUserDto: PatchUserDto) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepo: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    @InjectRepository(User)\n    private usersRepo: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async createUser(createUserDto: CreateUserDto) {\n    // check is the use exists with same email\n    const existingUser = await this.usersRepo.findOne({\n      where: { email: createUserDto.email },\n    });\n    // Handle exception\n    if (!existingUser) {\n      const user = this.usersRepo.create(createUserDto);\n      const data = await this.usersRepo.save(user);\n\n      return data;\n    }\n  }\n\n  findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(environment);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n    ];\n  }\n\n  async findOneById(id: number) {\n    return await this.usersRepo.findOneBy({\n      id,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.0.5\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cross-env : ^7.0.3\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
